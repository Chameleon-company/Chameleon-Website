import PropTypes from 'prop-types';
export declare const isCalendarType: PropTypes.Requireable<"Arabic" | "Hebrew" | "ISO 8601" | "US">;
export declare const isClassName: PropTypes.Requireable<NonNullable<string | (string | null | undefined)[] | null | undefined>>;
export declare function isMinDate(props: Record<string, unknown>, propName: string, componentName: string): Error | null;
export declare function isMaxDate(props: Record<string, unknown>, propName: string, componentName: string): Error | null;
export declare const isRef: PropTypes.Requireable<NonNullable<((...args: any[]) => any) | PropTypes.InferProps<{
    current: PropTypes.Requireable<any>;
}> | null | undefined>>;
export declare const isValue: PropTypes.Requireable<NonNullable<Date | (Date | null | undefined)[] | null | undefined>>;
export declare const isViews: PropTypes.Requireable<(string | null | undefined)[]>;
export declare function isView(props: Record<string, unknown> & {
    views?: string[];
}, propName: string, componentName: string): Error | null;
export declare namespace isView {
    var isRequired: (props: Record<string, unknown>, propName: string, componentName: string) => Error | null;
}
export declare const tileGroupProps: {
    activeStartDate: PropTypes.Validator<Date>;
    hover: PropTypes.Requireable<Date>;
    locale: PropTypes.Requireable<string>;
    maxDate: typeof isMaxDate;
    minDate: typeof isMinDate;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
    tileClassName: PropTypes.Requireable<NonNullable<((...args: any[]) => any) | NonNullable<string | (string | null | undefined)[] | null | undefined> | null | undefined>>;
    tileContent: PropTypes.Requireable<NonNullable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>>;
    value: PropTypes.Requireable<NonNullable<Date | (Date | null | undefined)[] | null | undefined>>;
    valueType: PropTypes.Requireable<string>;
};
export declare const tileProps: {
    activeStartDate: PropTypes.Validator<Date>;
    classes: PropTypes.Validator<(string | null | undefined)[]>;
    date: PropTypes.Validator<Date>;
    locale: PropTypes.Requireable<string>;
    maxDate: typeof isMaxDate;
    minDate: typeof isMinDate;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
    style: PropTypes.Requireable<{
        [x: string]: NonNullable<string | number | null | undefined> | null | undefined;
    }>;
    tileClassName: PropTypes.Requireable<NonNullable<((...args: any[]) => any) | NonNullable<string | (string | null | undefined)[] | null | undefined> | null | undefined>>;
    tileContent: PropTypes.Requireable<NonNullable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>>;
    tileDisabled: PropTypes.Requireable<(...args: any[]) => any>;
};
