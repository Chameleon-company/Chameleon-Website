import type { Range, RangeType } from './types';
/**
 * Returns a value no smaller than min and no larger than max.
 *
 * @param {Date} value Value to return.
 * @param {Date} min Minimum return value.
 * @param {Date} max Maximum return value.
 * @returns {Date} Value between min and max.
 */
export declare function between<T extends Date>(value: T, min?: T | null, max?: T | null): T;
export declare function isValueWithinRange(value: Date, range: Range<Date>): boolean;
export declare function isRangeWithinRange(greaterRange: Range<Date>, smallerRange: Range<Date>): boolean;
export declare function doRangesOverlap(range1: Range<Date>, range2: Range<Date>): boolean;
type ValueRangeOrValueWithValueType<T = Date, U = T | Range<T>> = U extends Range<T> ? {
    value: U;
    valueType?: undefined;
} : {
    value: U;
    valueType: RangeType;
};
type DateRangeOrDateWithDateType<T = Date, U = T | Range<T>> = U extends Range<T> ? {
    date: U;
    dateType?: undefined;
} : {
    date: U;
    dateType: RangeType;
};
export declare function getTileClasses(args: {
    hover?: Date;
} & ValueRangeOrValueWithValueType & DateRangeOrDateWithDateType): string[];
export {};
