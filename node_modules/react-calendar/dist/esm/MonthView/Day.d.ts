import React from 'react';
import PropTypes from 'prop-types';
import Tile from '../Tile';
import { formatDay as defaultFormatDay, formatLongDate as defaultFormatLongDate } from '../shared/dateFormatter';
import type { CalendarType } from '../shared/types';
type DayProps = {
    calendarType?: CalendarType;
    classes?: string[];
    currentMonthIndex: number;
    formatDay?: typeof defaultFormatDay;
    formatLongDate?: typeof defaultFormatLongDate;
} & Omit<React.ComponentProps<typeof Tile>, 'children' | 'formatAbbr' | 'maxDateTransform' | 'minDateTransform' | 'view'>;
declare function Day({ calendarType, classes, currentMonthIndex, formatDay, formatLongDate, ...otherProps }: DayProps): JSX.Element;
declare namespace Day {
    var propTypes: {
        currentMonthIndex: PropTypes.Validator<number>;
        formatDay: PropTypes.Requireable<(...args: any[]) => any>;
        formatLongDate: PropTypes.Requireable<(...args: any[]) => any>;
        activeStartDate: PropTypes.Validator<Date>;
        classes: PropTypes.Validator<(string | null | undefined)[]>;
        date: PropTypes.Validator<Date>;
        locale: PropTypes.Requireable<string>;
        maxDate: typeof import("../shared/propTypes").isMaxDate;
        minDate: typeof import("../shared/propTypes").isMinDate;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        style: PropTypes.Requireable<{
            [x: string]: NonNullable<string | number | null | undefined> | null | undefined;
        }>;
        tileClassName: PropTypes.Requireable<NonNullable<((...args: any[]) => any) | NonNullable<string | (string | null | undefined)[] | null | undefined> | null | undefined>>;
        tileContent: PropTypes.Requireable<NonNullable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>>;
        tileDisabled: PropTypes.Requireable<(...args: any[]) => any>;
    };
}
export default Day;
